# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: Form Layouts Page @smoke >> input fields
- Location: C:\Users\tnrup\OneDrive\Documents\Java\Playwright\GitRepo\pw-practice-app\tests\uiComponents.spec.ts:23:9

# Error details

```
Error: expect(received).toEqual(expected) // deep equality

Expected: "test2@test.com1"
Received: "test2@test.com"
    at C:\Users\tnrup\OneDrive\Documents\Java\Playwright\GitRepo\pw-practice-app\tests\uiComponents.spec.ts:36:28
```

# Page snapshot

```yaml
- navigation:
  - link:
    - img
  - link "PW-test"
  - button "Light"
  - button:
    - img
  - link:
    - img
  - link:
    - img
  - text: Nick Jones
- list:
  - listitem:
    - link "IoT Dashboard":
      - img
      - text: IoT Dashboard
  - listitem: FEATURES
  - listitem:
    - link "Forms" [expanded]:
      - img
      - text: Forms
      - img
    - list:
      - listitem:
        - link "Form Layouts"
      - listitem:
        - link "Datepicker"
  - listitem:
    - link "Modal & Overlays":
      - img
      - text: Modal & Overlays
      - img
    - list:
      - listitem:
        - link "Dialog"
      - listitem:
        - link "Window"
      - listitem:
        - link "Popover"
      - listitem:
        - link "Toastr"
      - listitem:
        - link "Tooltip"
  - listitem:
    - link "Extra Components":
      - img
      - text: Extra Components
      - img
    - list:
      - listitem:
        - link "Calendar"
  - listitem:
    - link "Charts":
      - img
      - text: Charts
      - img
    - list:
      - listitem:
        - link "Echarts"
  - listitem:
    - link "Tables & Data":
      - img
      - text: Tables & Data
      - img
    - list:
      - listitem:
        - link "Smart Table"
      - listitem:
        - link "Tree Grid"
  - listitem:
    - link "Auth":
      - img
      - text: Auth
      - img
    - list:
      - listitem:
        - link "Login"
      - listitem:
        - link "Register"
      - listitem:
        - link "Request Password"
      - listitem:
        - link "Reset Password"
- text: Inline form
- textbox "Jane Doe"
- textbox "Email"
- checkbox "Remember me"
- text: Remember me
- button "Submit"
- text: Using the Grid Email
- textbox "Email": test2@test.com
- text: Password
- textbox "Password"
- text: Radios
- radio "Option 1"
- text: Option 1
- radio "Option 2"
- text: Option 2
- radio "Disabled Option" [checked] [disabled]
- text: Disabled Option
- button "Sign in"
- text: Form without labels
- textbox "Recipients"
- textbox "Subject"
- textbox "Message"
- button "Send"
- text: Basic form Email address
- textbox "Email address"
- text: Password
- textbox "Password"
- checkbox "Check me out"
- text: Check me out
- button "Submit"
- text: Block form First Name
- textbox "First Name"
- text: Last Name
- textbox "Last Name"
- text: Email
- textbox "Email"
- text: Website
- textbox "Website"
- button "Submit"
- text: Horizontal form Email
- textbox "Email"
- text: Password
- textbox "Password"
- checkbox "Remember me"
- text: Remember me
- button "Sign in"
- navigation:
  - text: Created with ♥ by
  - link "Akveo"
  - text: "2019"
  - link ""
  - link ""
  - link ""
  - link ""
```

# Test source

```ts
   1 | import {test,expect} from '@playwright/test'
   2 |
   3 | test.describe.configure ({mode: 'parallel'})
   4 |
   5 |
   6 | test.beforeEach(async({page}) =>{
   7 |
   8 |     await page.goto('/')
   9 |     
   10 |
   11 | })
   12 |
   13 | test.describe.only('Form Layouts Page @smoke', () => {
   14 |     test.describe.configure ({retries:2})
   15 |     test.describe.configure ({mode: 'serial'})
   16 |
   17 |     test.beforeEach(async ({page}) =>{
   18 |         await page.getByText('Forms').click()
   19 |         await page.getByText('Form Layouts').click()
   20 |     
   21 |     })
   22 |     
   23 |     test('input fields',async({page}, testInfo) => {
   24 |
   25 |         if(testInfo.retry){
   26 |
   27 |             //do something
   28 |         }
   29 |         const usingTheGridEmailInput = page.locator('nb-card', {hasText: "Using the Grid"}).getByRole('textbox', {name:"Email"})
   30 |         await usingTheGridEmailInput.fill('test@test.com')
   31 |         await usingTheGridEmailInput.clear()
   32 |         await usingTheGridEmailInput.pressSequentially('test2@test.com')
   33 |
   34 |         //generic assertion
   35 |         const inputValue = await usingTheGridEmailInput.inputValue()
>  36 |         expect(inputValue).toEqual('test2@test.com1')
      |                            ^ Error: expect(received).toEqual(expected) // deep equality
   37 |
   38 |         //locator assertion
   39 |         await expect(usingTheGridEmailInput).toHaveValue('test2@test.com')
   40 |     })
   41 |
   42 |     test('radio buttons @block',async({page}) => {
   43 |         const usingTheGridForm = page.locator('nb-card', {hasText: "Using the Grid"})
   44 |
   45 |         //await usingTheGridForm.getByLabel('Option 1').check({force: true})
   46 |
   47 |         await usingTheGridForm.getByRole('radio', {name: "Option 1"}).check({force: true})
   48 |
   49 |         const radioStatus = await usingTheGridForm.getByRole('radio', {name: "Option 1"}).isChecked()
   50 |         expect(radioStatus).toBeTruthy()
   51 |         await expect(usingTheGridForm.getByRole('radio', {name: "Option 1"})).toBeAttached()
   52 |
   53 |         await usingTheGridForm.getByRole('radio', {name: "Option 2"}).check({force: true})
   54 |         expect(await usingTheGridForm.getByRole('radio', {name: "Option 1"}).isChecked()).toBeFalsy()
   55 |         expect(await usingTheGridForm.getByRole('radio', {name: "Option 2"}).isChecked()).toBeTruthy()
   56 |     })
   57 | })
   58 |
   59 |
   60 | test('checkboxes',async({page}) => {
   61 |     
   62 |     await page.getByText('Modal & Overlays').click()
   63 |     await page.getByText('Toastr').click()
   64 |     await page.getByRole('checkbox', {name: "Hide on click"}).uncheck({force: true})
   65 |     await page.getByRole('checkbox', {name: "Prevent arising of duplicate toast"}).check({force: true})
   66 |
   67 |     const allBoxes = page.getByRole('checkbox')
   68 |     for (const box of await allBoxes.all()){
   69 |         await box.check({force: true})
   70 |         expect(await box.isChecked()).toBeTruthy()
   71 |
   72 |     }
   73 |
   74 | })
   75 |
   76 | test ('lists and dropdowns',async({page}) => {
   77 |   
   78 |     const dropDownMenu = page.locator('ngx-header nb-select')
   79 |     
   80 |     await dropDownMenu.click()
   81 |     page.getByRole('list') //when the  list has UL tag
   82 |     page.getByRole('listitem') //when the  list has LI tag
   83 |
   84 |     //const optionList = page.getByRole('list').locator('nb-option')
   85 |     const optionList = page.locator('nb-option-list nb-option')
   86 |     await expect(optionList).toHaveText(["Light", "Dark", "Cosmic", "Corporate"])
   87 |     
   88 |     await optionList.filter({hasText: "Cosmic"}).click()
   89 |     const header = page.locator('nb-layout-header')
   90 |     await expect(header).toHaveCSS('background-color', 'rgb(50, 50, 89)')
   91 |
   92 |     const colors = {
   93 |         "Light": "rgb(255, 255, 255)", 
   94 |         "Dark": "rgb(34, 43, 69)", 
   95 |         "Cosmic": "rgb(50, 50, 89)",
   96 |         "Corporate": "rgb(255, 255, 255)"
   97 |     }
   98 |
   99 |     await dropDownMenu.click()
  100 |         for(const color in colors) {
  101 |         await optionList.filter({hasText: color}).click()
  102 |         await expect(header).toHaveCSS('background-color', colors[color])
  103 |        
  104 |         if(color != "Corporate")
  105 |             await dropDownMenu.click()
  106 |
  107 |
  108 |     }
  109 |     
  110 | })
  111 |
  112 | test('tooltips',async({page}) => {
  113 |     
  114 |     await page.getByText('Modal & Overlays').click()
  115 |     await page.getByText('Tooltip').click()
  116 |     const toolTipCard = page.locator('nb-card', {hasText : "Tooltip Placements"})
  117 |     await toolTipCard.getByRole("button", {name: "Top"}).hover()
  118 |
  119 |     page.getByRole('tooltip') // if you have a role toolyip created
  120 |     const tooltip = await page.locator('nb-tooltip').textContent()
  121 |     expect(tooltip).toEqual('This is a tooltip')
  122 | })
  123 |
  124 | test('dialog box',async({page}) => {
  125 |     await page.getByText('Tables & Data').click()
  126 |     await page.getByText('Smart Table').click()
  127 |
  128 |
  129 |     //Dialog Listener page.on and event is dialog
  130 |     page.on('dialog', dialog =>
  131 |     {
  132 |         expect (dialog.message()).toEqual('Are you sure you want to delete?')
  133 |         dialog.accept()
  134 |        
  135 |     })
  136 |     await page.getByRole('table').locator('tr', {hasText: "mdo@gmail.com"}).locator('.nb-trash').click()
```